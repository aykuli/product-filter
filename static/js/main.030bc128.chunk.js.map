{"version":3,"sources":["constantas/productsJSON.js","components/search-bar/search-bar.jsx","components/product-category/product-category-row.jsx","components/product-row/product-row.jsx","components/product-table/product-table.jsx","components/products/products.jsx","App.js","serviceWorker.js","index.js"],"names":["category","price","stocked","name","SearchBar","handleFilterTextChange","value","target","props","onFilterTextChange","handleIsStockChange","checked","isStockChange","className","type","placeholder","this","filterText","onChange","isStockOnly","Component","ProductCategoryRow","colSpan","ProductRow","product","redTxt","color","style","ProductTable","row","lastCategory","products","forEach","indexOf","push","key","Products","PRODUCTS","FilterableProductTable","state","txt","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.030bc128.chunk.js","sourcesContent":["export default [\r\n    {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\r\n    {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\r\n    {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\r\n    {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\r\n    {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\r\n    {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\r\n  ];","import React, { Component } from 'react';\r\n\r\nimport './search-bar.scss';\r\n\r\nexport default class SearchBar extends Component {\r\n  handleFilterTextChange = ({ target: {value}}) => {\r\n    this.props.onFilterTextChange(value);\r\n  }\r\n\r\n  handleIsStockChange = ({ target: {checked}}) => {\r\n    this.props.isStockChange(checked);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar\">\r\n        <input  type=\"text\"\r\n                placeholder=\"Search...\"\r\n                value={this.props.filterText}\r\n                onChange={this.handleFilterTextChange}\r\n        />\r\n        <label>\r\n          <input  type=\"checkbox\" \r\n                  name=\"stocked\"\r\n                  value={this.props.isStockOnly}\r\n                  onChange={this.handleIsStockChange}\r\n          />Only show products in stock\r\n        </label>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\n\r\nimport './product-category-row.scss';\r\n\r\nexport default function ProductCategoryRow(props) {\r\n    return (\r\n        <tr>\r\n            <td className=\"product-category\" colSpan='2'>{props.category}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport './product-row.scss';\r\n\r\nexport default function ProductRow(props) {\r\n    const name = props.product.name;\r\n    const price = props.product.price;\r\n    const redTxt = props.product.stocked ? null : {color: 'red'};\r\n\r\n    return (\r\n        <tr>\r\n            <td className=\"product-row__td\" style={redTxt}>\r\n                {name}\r\n            </td>\r\n            <td className=\"product-row__td\">\r\n                {price}\r\n            </td>\r\n        </tr>\r\n    )  \r\n}","import React from 'react';\r\n\r\nimport './product-table.scss';\r\n\r\nimport ProductCategoryRow from '../product-category/product-category-row';\r\nimport ProductRow from '../product-row/product-row';\r\n\r\nexport default function ProductTable(props) {  \r\n    const row =[];\r\n    let lastCategory = '';\r\n\r\n    props.products.forEach(product => {\r\n        if (product.name.indexOf(props.filterText) === -1) return;\r\n\r\n        // если такой категории еще не было, формирует строку с категорией\r\n        if (product.category !== lastCategory) {\r\n            row.push(\r\n                <ProductCategoryRow key={product.category} \r\n                                    category={product.category} \r\n                />);\r\n        }\r\n\r\n        // если продукта нет в стоке и стоит галочка - не выбирать те продукты, что не в стоке\r\n        if (!product.stocked && props.isStockOnly) return;\r\n\r\n        row.push(<ProductRow key={product.name} product={product}/>);\r\n        \r\n        lastCategory=product.category;\r\n    });\r\n\r\n    return (\r\n        <table className='product-table'>\r\n        <thead>\r\n            <tr>\r\n                <th className=\"product-table__th\">Name</th>\r\n                <th className=\"product-table__th\">Price</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {row}\r\n        </tbody>\r\n        </table>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nimport './products.scss';\r\n\r\nimport PRODUCTS from '../../constantas/productsJSON';\r\nimport SearchBar from '../search-bar/search-bar';\r\nimport ProductTable from '../product-table/product-table';\r\n\r\nexport default function Products() {\r\n  return (\r\n    <FilterableProductTable products={PRODUCTS} />\r\n  )\r\n}\r\n\r\nclass FilterableProductTable extends Component {\r\n  state = {\r\n    filterText: '',\r\n    isStockOnly: false,\r\n  }\r\n\r\n  onFilterTextChange = (txt) => this.setState({filterText: txt})\r\n\r\n  isStockChange = (isStockOnly) => this.setState({isStockOnly: isStockOnly})\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"products__wrap\">\r\n          <SearchBar  onFilterTextChange={this.onFilterTextChange} \r\n                      isStockChange={this.isStockChange}\r\n                      isStockOnly={this.state.isStockOnly}\r\n                      filterText={this.state.filterText}\r\n          />\r\n          <ProductTable products={this.props.products} \r\n                        isStockOnly={this.state.isStockOnly}\r\n                        filterText={this.state.filterText}\r\n          />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\n\nimport './App.scss';\n\nimport Products from './components/products/products';\n\n// https://ru.reactjs.org/docs/thinking-in-react.html\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Products />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}